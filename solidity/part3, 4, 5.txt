Part3. DApp 시작해보기
<중개자의 개입이 필요 없는 크라우드펀딩 Dapp 만들기>
누구나 아이디어를 등록할 수 있습니다.
캠페인에는 목표 금액과 종료 기간이 있습니다.
등록된 캠페인 기록은 지워지지 않습니다.
누구나 원하는 금액만큼 캠페인에 펀딩할 수 있습니다.
펀딩을 해준 사람에 대한 기록이 남습니다.
목표 금액을 달성했다면 펀딩 자금은 아이디어 등록자가 가집니다.
목표 금액을 달성하지 못했다면 펀딩 자금은 환불됩니다.

1) 코드 가장 윗부분에 솔리디티 버전 pragma solidity ^0.4.18;을 명시하고,
2) 다음 줄에 Crowdfunding이라는 이름의 계약(Contract) 선언하세요.


Part4. 접근 제어하기
1. 접근 제어자(Visibility Modifiers)
- public : 외부에서 호출 가능. Getter 자동 생성. 함수 디폴트.
- internal : 이 상태 변수/함수를 선언한 계약과 그 계약을 상속 받은 계약에서만 호출 가능. 상태 변수 디폴트.
- private : 해당 계약에서만 호출 가능. 상속 받은 계약도 호출할 수 없음.
- external : 인터페이스의 함수를 의미함. 이 상태 변수/함수를 선언한 계약 내에서는 호출할 수 없음.


Part5. 가스 절약하기
데이터를 읽기만 하는 단순 작업은 가스를 소모하지 않게 설정하기.

1. view 키워드
- 상태를 변경하지 않는다. 읽기 O, 수정 X
- 호출할 때 Gas 소모 X


2. Pure 함수
- 블록체인 네트워크에 기록된 데이터에 아예 접근하지 X
- 파라미터로 주어지지 않은 상태 변수는 읽기 X, 수정 X






<크라우드펀딩 Dapp 구현 방법>
V 누구나 아이디어를 등록할 수 있습니다.		=> 접근 제어자 public 으로 creator 선언
V 캠페인에는 목표 금액과 종료 기간이 있습니다.	=> getFundingGoal()은 view로, getDeadline()은 pure로 만들기
등록된 캠페인 기록은 지워지지 않습니다.
누구나 원하는 금액만큼 캠페인에 펀딩할 수 있습니다.
펀딩을 해준 사람에 대한 기록이 남습니다.
목표 금액을 달성했다면 펀딩 자금은 아이디어 등록자가 가집니다.
목표 금액을 달성하지 못했다면 펀딩 자금은 환불됩니다.