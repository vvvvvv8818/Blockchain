프로그래머스 - 이더리움 솔리디티 실습 튜토리얼
온라인 강의 내용 정리

Part1. Hello, Solidity!

1. 솔리디티(Solidity) 언어란?
이더리움 블록체인 플랫폼에서 스마트 계약을 정의하는 언어.
js와 문법이 유사함. but 자료형 명시해야 함. (정적 타입 언어이기 때문)

2. DApp이란?
스마트 계약을 구현한 블록체인 기반의 탈중앙화 애플리케이션.

* 정적 타입 언어(Statically Typed Language) : C언어나 Java와 같이 자료형을 명시해 주어야 하는 언어. ?
* 블록체인의 가장 큰 특징으로 중앙 시스템이 아니라 분산된 환경에서 모든 거래가 이루어집니다. ?

3. 주요 자료형
- uint : unsigned 정수형
- int : 정수형
- bool : 논리 자료형
- string : UTF-8 인코딩 문자열
- bytes : 바이트
- address : 이더리움 주소 값 (0xaDc7915A0...)
* 부동소수점 자료형(float) 지원하지 않음

4. 레퍼런스 자료형
- 배열
- 구조체

contract Variables {
string public name = "Type Test Code";
uint[] setOfYear = [2018, 2019, 2020];
uint year = setOfYear[0];

function getYear() public view returns (uint){
	return year;
}
}

5. 연산자
논리, 비교, 비트, 단항, 이항 C언어와 같고 **로 거듭 제곱 가능

6. 제어문
조건문 : if, else, 삼항 연산자
반복문 : while, do, for
반복문 분기 : break, continue
반환문 : return
* switch/case나 goto문은 지원하지 않음.
* if (true){...} 는 허용. if (1){...}는 허용하지 않음.


Part2. 이더리움 이해하기
- 스마트 계약도 내부적으로 이더리움 계정을 가진다.
- 계약 계정을 통해 이더를 거래한다.
- 예시 : A가 B에게 10 이더를 보내는 계약 호출 : 1) A가 A 계정에서 계약 계정으로 10 이더를 송금 2) 계약이 계약 계정에서 B 계정으로 10이더를 송금

1. Payable 키워드
- 계약 계정에 외부에서 이더를 송금 받을 수 있도록 함.
- A에게 송금을 받으려면 A가 호출하는 함수에 payable 키워드가 있어야 함.

2. 메시지 프로퍼티 (Message Properties)
정보 / 타입 / 설명
data	/ byte	/ 호출 데이터
sender	/ address / 계약을 호출한 이더리움 주소
value	/ uint	/ 계약 주소로 보낸 Ether 량
gas	/ uint	/ gas limit에서 함수를 호출하고 남은 가스

* gas limit : 그 계약에서 한번 호출로 소비할 수 있는 최대의 가스 양 ?

3. Transfer 함수
- 계약이 다른 이에게 이더를 전송함.

<받는 사람의 주소>.transfer(<송금할 금액>);


4. 스마트 계약은 어떻게 실행될까?
작성된 스마트 계약은 EVM 타깃으로 컴파일된 후, 이더리움 네트워크에 배포됩니다. 
이렇게 배포된 스마트 계약 코드는 Gas라는 수수료를 내야 사용할 수 있습니다.

5. 수수료는 왜 나가나요?
스마트 계약은 실제로 블록체인을 관리하는 노드들에 의해 실행됩니다. 이때 노드는 데이터를 검증하고, 기록하는 등 다양한 일을 해줍니다.
따라서 이 일을 해주는 대가로 Gas라고 부르는 수수료를 내야 합니다.
스마트 계약에 명령어가 많은 수록 Gas를 더 많이 내야 합니다.

6.트랜잭션 (Transaction)
- 스마트 계약을 실행하면 이더리움 블록체인에 기록이 남는다.
- 이 기록이 저장되는 형태가 트랜잭션이다.
- 수수료(가스) 등 다양한 정보를 담고 있다.
transactionHash : 트랜잭션의 해시값
transactionIndex : 트랜잭션의 인덱스 값
blockHash : 이 트랜잭션이 추가된 블록의 해시값
blockNumber : 이 트랜잭션이 추가된 블록의 번호
gasUsed : 이 트랜잭션 호출에 소비한 가스양
cumulativeGasUsed : 누적으로 사용된 가스량
contractAddress : 계약의 주소
logs : event로 로깅된 정보 ( 후속 강의로 다룰 예정 )

- 트래잭션이 모여 블록(block)을 이룬다.
- 블록들이 체인처럼 엮인 모습이기 때문에 블록체인(blockchain)이라고 부른다.

